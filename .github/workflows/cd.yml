name: CD

on:
  push:
    branches:
      - 'master'

env:
  AWS_REGION: ap-southeast-1
  DOCKER_IMAGE: asdads6495/golden-owl-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:$IMAGE_TAG .
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_IMAGE }}:$IMAGE_TAG
          docker push ${{ env.DOCKER_IMAGE }}:latest
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update Auto Scaling Group
        env:
          ASG_NAME: golden-owl-asg
          LAUNCH_TEMPLATE_NAME: golden-owl-
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Get current launch template
          TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=${LAUNCH_TEMPLATE_NAME}*" \
            --query 'LaunchTemplates[0].LaunchTemplateId' \
            --output text)
          
          # Create user data script
          USER_DATA=$(cat <<EOF | base64 -w 0
          #!/bin/bash
          yum update -y
          yum install -y docker
          service docker start
          docker run -d -p 3000:3000 ${DOCKER_IMAGE}:${IMAGE_TAG}
          EOF
          )
          
          # Create new launch template version with updated image
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $TEMPLATE_ID \
            --source-version '$Latest' \
            --launch-template-data "{\"UserData\":\"$USER_DATA\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          # Update ASG to use new template version
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template "LaunchTemplateId=$TEMPLATE_ID,Version=$NEW_VERSION"
          
          # Check if there's an ongoing instance refresh
          echo "Checking for existing instance refresh..."
          REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $ASG_NAME \
            --query 'InstanceRefreshes[0].Status' \
            --output text)
          
          if [ "$REFRESH_STATUS" == "InProgress" ] || [ "$REFRESH_STATUS" == "Pending" ]; then
            echo "Found existing instance refresh with status: $REFRESH_STATUS"
            REFRESH_ID=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --query 'InstanceRefreshes[0].InstanceRefreshId' \
              --output text)
            
            echo "Cancelling existing instance refresh: $REFRESH_ID"
            aws autoscaling cancel-instance-refresh \
              --auto-scaling-group-name $ASG_NAME || true
            
            echo "Waiting for cancellation to complete..."
            sleep 10
          fi
          
          # Start instance refresh for rolling update
          echo "Starting new instance refresh..."
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage": 50}'
          
          echo "Deployment completed! New image: ${DOCKER_IMAGE}:${IMAGE_TAG}"
